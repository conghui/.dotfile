" vim: fdm=marker ts=2 sts=2 sw=2 fdl=0

" setup & neobundle {{{
  set nocompatible
  set all& "reset everything to their defaults
  set rtp+=~/.vim/bundle/neobundle.vim
  call neobundle#begin(expand('~/.vim/bundle/'))
  NeoBundleFetch 'Shougo/neobundle.vim'
"}}}
" functions {{{
  function! s:get_cache_dir(suffix) "{{{
    return resolve(expand(s:cache_dir . '/' . a:suffix))
  endfunction "}}}
  function! EnsureExists(path) "{{{
    if !isdirectory(expand(a:path))
      call mkdir(expand(a:path))
    endif
  endfunction "}}}
  function! Preserve(command) "{{{
    " preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the business:
    execute a:command
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
  endfunction "}}}
  function! StripTrailingWhitespace() "{{{
    call Preserve("%s/\\s\\+$//e")
  endfunction "}}}

"}}}
" default settings {{{
  let s:settings                     = {}
  let s:cache_dir                    = '~/.vim/.cache'
  let s:is_macvim                    = has('gui_macvim')
  let s:settings.default_indent      = 2
  let s:settings.max_column          = 120
  let s:settings.enable_colorcolumn  = 0
  let s:settings.enable_cursorcolumn = 0
  let s:settings.colorscheme         = 'solarized'
"}}}
" base configuration {{{
  set timeoutlen=300                                  "mapping timeout
  set ttimeoutlen=50                                  "keycode timeout

  set mouse=a                                         "enable mouse
  set mousehide                                       "hide when characters are typed
  set history=1000                                    "number of command lines to remember
  set ttyfast                                         "assume fast terminal connection
  set viewoptions=folds,options,cursor,unix,slash     "unix/windows compatibility
  set encoding=utf-8                                  "set encoding for text
  if exists('$TMUX')
    set clipboard=
  else
    set clipboard=unnamed                             "sync with OS clipboard
  endif
  set hidden                                          "allow buffer switching without saving
  set autoread                                        "auto reload if file saved externally
  set fileformats+=mac                                "add mac to auto-detection of file format line endings
  set nrformats-=octal                                "always assume decimal numbers
  set showcmd
  set tags=tags;/
  set showfulltag
  set modeline
  set modelines=5
  set completeopt-=preview

  if $SHELL =~ '/fish$'
    " VIM expects to be run from a POSIX shell.
    set shell=sh
  endif

  set noshelltemp                                     "use pipes

  " whitespace
  set backspace=indent,eol,start                      "allow backspacing everything in insert mode
  set autoindent                                      "automatically indent to match adjacent lines
  set expandtab                                       "spaces instead of tabs
  set smarttab                                        "use shiftwidth to enter tabs
  let &tabstop=s:settings.default_indent              "number of spaces per tab for display
  let &softtabstop=s:settings.default_indent          "number of spaces per tab in insert mode
  let &shiftwidth=s:settings.default_indent           "number of spaces when indenting
  set list                                            "highlight whitespace
  set listchars=tab:│\ ,trail:•,extends:❯,precedes:❮
  set shiftround
  set linebreak
  let &showbreak='↪ '

  set scrolloff=1                                     "always show content after scroll
  set scrolljump=5                                    "minimum number of lines to scroll
  set display+=lastline
  set wildmenu                                        "show list for autocomplete
  set wildmode=list:full
  set wildignorecase

  "set splitbelow
  set splitright

  " disable sounds
  set noerrorbells
  set novisualbell
  set t_vb=

  " searching
  set hlsearch                                        "highlight searches
  set incsearch                                       "incremental searching
  set ignorecase                                      "ignore case for searching
  set smartcase                                       "do case-sensitive if there's a capital letter
  if executable('ack')
    set grepprg=ack\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow\ $*
    set grepformat=%f:%l:%c:%m
  endif
  if executable('ag')
    set grepprg=ag\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow
    set grepformat=%f:%l:%c:%m
  endif

  " compiling
  "if filereadable('SConstruct')
    "set makeprg=scons
  "endif

  " vim file/folder management {{{
    " persistent undo
    if exists('+undofile')
      set undofile
      let &undodir = s:get_cache_dir('undo')
    endif

    " backups
    set backup
    let &backupdir = s:get_cache_dir('backup')

    " swap files
    let &directory = s:get_cache_dir('swap')
    set noswapfile

    call EnsureExists(s:cache_dir)
    call EnsureExists(&undodir)
    call EnsureExists(&backupdir)
    call EnsureExists(&directory)
  "}}}

  let mapleader = ","
  let g:mapleader = ","
"}}}
" ui configuration {{{
  set background=dark
  set showmatch                                       "automatically highlight matching braces/brackets/etc.
  set matchtime=2                                     "tens of a second to show matching parentheses
  set number
  set lazyredraw
  set laststatus=2
  set noshowmode
  set foldenable                                      "enable folds by default
  set foldmethod=syntax                               "fold via syntax of files
  set foldlevelstart=99                               "open all folds by default
  let g:xml_syntax_folding=1                          "enable xml folding

  set cursorline
  autocmd WinLeave * setlocal nocursorline
  autocmd WinEnter * setlocal cursorline

  if s:settings.enable_colorcolumn
    let &colorcolumn=s:settings.max_column
  endif

  if s:settings.enable_cursorcolumn
    set cursorcolumn
    autocmd WinLeave * setlocal nocursorcolumn
    autocmd WinEnter * setlocal cursorcolumn
  endif

  if has('conceal')
    set conceallevel=1
    "set listchars+=conceal:Δ
  endif

  if has('gui_running')
    if s:is_macvim
      set guifont=Meslo_LG_S_DZ_Regular_for_Powerline:h13
    elseif has('gui_gtk')
      set guifont=Meslo\ LG\ S\ DZ\ for\ Powerline\ 13
    endif
  else
    if $COLORTERM == 'gnome-terminal'
      set t_Co=256 "why you no tell me correct colors?!?!
    endif
    if $TERM_PROGRAM == 'iTerm.app'
      " different cursors for insert vs normal mode
      if exists('$TMUX')
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
      else
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
      endif
    endif
  endif
"}}}
" Plugin: syntax  & colorscheme"{{{
  NeoBundle 'tpope/vim-markdown'
  NeoBundle 'vim-scripts/scons.vim'
  NeoBundle 'artoj/qmake-syntax-vim'
  NeoBundle 'vim-scripts/STL-Syntax'
  NeoBundle 'vim-scripts/gnuplot.vim'
  NeoBundle 'vim-scripts/wombat256.vim'
  NeoBundle 'vim-scripts/DoxyGen-Syntax'
NeoBundle 'altercation/vim-colors-solarized' "{{{
  "let g:solarized_termcolors=256
  "let g:solarized_termtrans=1
"}}}
"}}}
" Plugin: better user experience"{{{
    NeoBundle 'matchit.zip'
    NeoBundle 'powerline/fonts'
    NeoBundle 'tpope/vim-endwise'
    NeoBundle 'vim-scripts/makeprgs'
    NeoBundle 'airblade/vim-gitgutter'
    NeoBundle 'nacitar/terminalkeys.vim'
    "NeoBundle Shougo/vimproc.vim'"{{{
    NeoBundle 'Shougo/vimproc.vim', {
      \ 'build': {
        \ 'mac': 'make -f make_mac.mak',
        \ 'unix': 'make -f make_unix.mak',
        \ 'cygwin': 'make -f make_cygwin.mak',
        \ 'windows': '"C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\bin\nmake.exe" make_msvc32.mak',
      \ },
    \ }
    "}}}
    NeoBundle 'DoxygenToolkit.vim' "{{{
      au BufNewFile,BufRead *.doxygen setfiletype doxygen
      let g:doxygen_enhanced_color=0
      let g:doxygen_my_rendering=0
      let g:doxygen_javadoc_autobrief=1
      let g:doxygen_end_punctuation='[.]'
      let g:doxygenErrorComment=0
      let g:doxygenLinkError=0
      let g:DoxygenToolkit_authorName="Conghui He"
      map <F9> :Dox<cr>
      imap <F9> <Esc>:Dox<cr>
    "}}}
"}}}

    NeoBundle 'honza/vim-snippets'
    NeoBundle 'Valloric/ListToggle'
    NeoBundle 'scrooloose/nerdcommenter'
    NeoBundle 'terryma/vim-expand-region'
    NeoBundleLazy 'majutsushi/tagbar', {'autoload':{'commands':'TagbarToggle'}}
    NeoBundle 'SirVer/ultisnips' "{{{
      let g:UltiSnipsExpandTrigger="<tab>"
      let g:UltiSnipsJumpForwardTrigger="<tab>"
      let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
      let g:UltiSnipsSnippetsDir='~/.vim/snippets'
    "}}}
    NeoBundle 'tpope/vim-dispatch' "{{{
      autocmd FileType java let b:dispatch = 'javac %'
      autocmd FileType tex  let b:dispatch = 'scons'
    "}}}
    NeoBundle 'tpope/vim-unimpaired' "{{{
      nmap <c-up>   [e
      nmap <c-down> ]e
      vmap <c-up>   [egv
      vmap <c-down> ]egv
    "}}}
    NeoBundle 'junegunn/vim-easy-align' "{{{
      " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
      vmap <Enter> <Plug>(EasyAlign)
      " Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
      nmap <Leader>a <Plug>(EasyAlign)
    "}}}
    NeoBundle 'MattesGroeger/vim-bookmarks' "{{{
      let g:bookmark_auto_close = 1
      let g:bookmark_save_per_working_dir = 1
      let g:bookmark_auto_save = 1
    "}}}
    NeoBundle 'Valloric/YouCompleteMe', {'vim_version':'7.3.584'} "{{{
      nnoremap <leader>jd :YcmCompleter GoTo<CR>
      let g:ycm_confirm_extra_conf = 0
      let g:ycm_complete_in_comments_and_strings=1
      let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
      let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']
    "}}}
    NeoBundle 'jcf/vim-latex' "{{{
      set shellslash
      set grepprg=grep\ -nH\ $*

      let g:tex_flavor                 = 'latex'
      let g:Tex_DefaultTargetFormat    = 'pdf'
      let g:Tex_CompileRule_pdf        = 'pdflatex -synctex=1 --interaction=nonstopmode $*'
      let g:Tex_MultipleCompileFormats = 'pdf,bib,pdf'

      if has("unix") && match(system("uname"),'Darwin') != -1
        " It's a Mac!
        let g:Tex_ViewRule_ps = 'Preview'
        let g:Tex_ViewRule_pdf = 'Skim'
      endif
    "}}}


    NeoBundle 'sjl/gundo.vim'
    NeoBundle 'terryma/vim-multiple-cursors'
    NeoBundle 'jiangmiao/auto-pairs' "{{{
      au Filetype tex let b:AutoPairs = {}
    "}}}
    NeoBundle 'justinmk/vim-sneak' "{{{
      let g:sneak#streak = 1
    "}}}
    NeoBundle 'bling/vim-airline' "{{{
      let g:airline_powerline_fonts = 1
      let g:airline#extensions#tabline#enabled = 1
      let g:airline#extensions#tabline#left_sep = ' '
      let g:airline#extensions#tabline#left_alt_sep = '¦'
      let g:airline#extensions#tabline#buffer_idx_mode = 1
      nmap <leader>1 <Plug>AirlineSelectTab1
      nmap <leader>2 <Plug>AirlineSelectTab2
      nmap <leader>3 <Plug>AirlineSelectTab3
      nmap <leader>4 <Plug>AirlineSelectTab4
      nmap <leader>5 <Plug>AirlineSelectTab5
      nmap <leader>6 <Plug>AirlineSelectTab6
      nmap <leader>7 <Plug>AirlineSelectTab7
      nmap <leader>8 <Plug>AirlineSelectTab8
      nmap <leader>9 <Plug>AirlineSelectTab9
    "}}}
    NeoBundle 'nathanaelkane/vim-indent-guides' "{{{
      let g:indent_guides_start_level=1
      let g:indent_guides_guide_size=1
      let g:indent_guides_enable_on_vim_startup=0
      let g:indent_guides_color_change_percent=3
      if !has('gui_running')
        let g:indent_guides_auto_colors=0
        function! s:indent_set_console_colors()
          hi IndentGuidesOdd ctermbg=235
          hi IndentGuidesEven ctermbg=236
        endfunction
        autocmd VimEnter,Colorscheme * call s:indent_set_console_colors()
      endif
    "}}}
    NeoBundle 'tpope/vim-fugitive' "{{{
      nnoremap <silent> <leader>gs :Gstatus<CR>
      nnoremap <silent> <leader>gd :Gdiff<CR>
      nnoremap <silent> <leader>gc :Gcommit<CR>
      nnoremap <silent> <leader>gb :Gblame<CR>
      nnoremap <silent> <leader>gl :Glog<CR>
      nnoremap <silent> <leader>gp :Git push<CR>
      nnoremap <silent> <leader>gw :Gwrite<CR>
      nnoremap <silent> <leader>gr :Gremove<CR>
      autocmd BufReadPost fugitive://* set bufhidden=delete
    "}}}
    NeoBundleLazy 'gregsexton/gitv', {'depends':['tpope/vim-fugitive'], 'autoload':{'commands':'Gitv'}} "{{{
      nnoremap <silent> <leader>gv :Gitv<CR>
      nnoremap <silent> <leader>gV :Gitv!<CR>
    "}}}
    NeoBundle 'derekwyatt/vim-fswitch' "{{{
      nmap <silent> <Leader>of :FSHere<cr>
      nmap <silent> <Leader>oh :FSSplitLeft<cr>
      nmap <silent> <Leader>ol :FSSplitRight<cr>
      nmap <silent> <Leader>ok :FSSplitAbove<cr>
      nmap <silent> <Leader>oj :FSSplitBelow<cr>
    "}}}
    NeoBundle 'Shougo/unite.vim' "{{{
      let bundle = neobundle#get('unite.vim')
      function! bundle.hooks.on_source(bundle)
        call unite#filters#matcher_default#use(['matcher_fuzzy'])
        call unite#filters#sorter_default#use(['sorter_rank'])
        call unite#custom#profile('default', 'context', {
              \ 'start_insert': 1
              \ })
      endfunction

      let g:unite_data_directory=s:get_cache_dir('unite')
      let g:unite_source_history_yank_enable=1
      let g:unite_source_rec_max_cache_files=200

      if executable('ag')
        let g:unite_source_grep_command='ag'
        let g:unite_source_grep_default_opts='--nocolor --line-numbers --nogroup -S -C4'
        let g:unite_source_grep_recursive_opt=''
      elseif executable('ack')
        let g:unite_source_grep_command='ack'
        let g:unite_source_grep_default_opts='--no-heading --no-color -C4'
        let g:unite_source_grep_recursive_opt=''
      endif

      function! s:unite_settings()
        nmap <buffer> Q     <plug>(unite_exit)
        nmap <buffer> <esc> <plug>(unite_exit)
        imap <buffer> <esc> <plug>(unite_exit)
        imap <buffer> <C-j> <Plug>(unite_select_next_line)
        imap <buffer> <C-k> <Plug>(unite_select_previous_line)
      endfunction
      autocmd FileType unite call s:unite_settings()

      nmap <space> [unite]
      nnoremap [unite] <nop>

      "nnoremap <silent> [unite]r :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec/async:!<cr><c-u>
      nnoremap <silent> [unite]r :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec<cr><c-u>
      nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize -buffer-name=files file<cr><c-u>
      nnoremap <silent> [unite]e :<C-u>Unite -buffer-name=recent file_mru<cr>
      nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yanks history/yank<cr>
      nnoremap <silent> [unite]l :<C-u>Unite -auto-resize -buffer-name=line line<cr>
      nnoremap <silent> [unite]b :<C-u>Unite -auto-resize -buffer-name=buffers buffer file_mru<cr>
      nnoremap <silent> [unite]/ :<C-u>Unite -no-quit -buffer-name=search grep:.<cr>
      nnoremap <silent> [unite]m :<C-u>Unite -auto-resize -buffer-name=mappings mapping<cr>
      nnoremap <silent> [unite]s :<C-u>Unite -quick-match buffer<cr>

      NeoBundleLazy 'Shougo/neomru.vim', {'autoload':{'unite_sources':'file_mru'}}
      NeoBundleLazy 'Shougo/unite-outline', {'autoload':{'unite_sources':'outline'}}
      nnoremap <silent> [unite]o :<C-u>Unite -auto-resize -buffer-name=outline outline<cr>
      NeoBundleLazy 'Shougo/unite-help', {'autoload':{'unite_sources':'help'}}
      nnoremap <silent> [unite]h :<C-u>Unite -auto-resize -buffer-name=help help<cr>
  "}}}

 " mappings {{{
  noremap    <c-a>   ggVG
  inoremap    <c-v>   <c-o>:set paste<cr><c-r>+<c-o>:set nopaste<cr>
  xnoremap    <c-c>   "+y
  xnoremap    <c-x>   "+x

  inoremap jk <Esc>

  " [Basically you press * or # to search for the current selection !! Really useful]
  vnoremap    <silent> *  y/<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>
  vnoremap    <silent> #  y?<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>

  " [CTRL-hjkl to browse command history and move the cursor]
  cnoremap    <c-k>   <up>
  cnoremap    <c-j>   <down>
  cnoremap    <c-h>   <left>
  cnoremap    <c-l>   <right>

  " [Easy indent in visual mode]
  xnoremap    <   <gv
  xnoremap    >   >gv

  " [Up down move]
  nnoremap    j       gj
  nnoremap    k       gk
  nnoremap    gj      j
  nnoremap    gk      k

  " [Misc]
  nnoremap    J       gJ
  nnoremap    gJ      J
  nnoremap    -       _
  nnoremap    _       -

  " no Highlight search"
  nmap <leader><cr> :nohlsearch<cr>

  " [Spell checking]"
  map <leader>se :setlocal spell spelllang=en_us<cr>
  map <leader>sn :setlocal nospell<cr>

"}}}

" Autocmd: "{{{
  " go back to previous position of cursor if any
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \  exe 'normal! g`"zvzz' |
    \ endif

  autocmd FileType python setlocal foldmethod=indent
  autocmd FileType markdown setlocal nolist
  autocmd FileType vim setlocal fdm=indent keywordprg=:help

  " remove (strip) whitespace at the end of lines when saving
  autocmd! BufWritePre <buffer> :call StripTrailingWhitespace()

"}}}

" finish loading {{{
  if exists('g:dotvim_settings.disabled_plugins')
    for plugin in g:dotvim_settings.disabled_plugins
      exec 'NeoBundleDisable '.plugin
    endfor
  endif

  call neobundle#end()
  filetype plugin indent on
  syntax enable
  exec 'colorscheme '.s:settings.colorscheme

  NeoBundleCheck
"}}}
