let mapleader = ","
let g:mapleader = ","

" dein setup{{{
if &compatible | set nocompatible | endif

let $CACHE = expand('$DOTFILEDIR/bundle')
let s:dein_dir = finddir('dein.vim', '.;')
if s:dein_dir != '' || &runtimepath !~ '/dein.vim'
  if s:dein_dir == '' && &runtimepath !~ '/dein.vim'
    let s:dein_dir = expand('$CACHE/dein') . '/repos/github.com/Shougo/dein.vim'
    if !isdirectory(s:dein_dir)
      execute '!git clone https://github.com/Shougo/dein.vim' s:dein_dir
    endif
  endif
  execute 'set runtimepath^=' . substitute(fnamemodify(s:dein_dir, ':p') , '/$', '', '')
endif
"}}}
if dein#load_state(expand('$CACHE/dein'), expand('<sfile>'))
  call dein#begin(expand('$CACHE/dein'), expand('<sfile>'))
  call dein#add('Shougo/dein.vim')
  call dein#add('sheerun/vim-polyglot')
  call dein#add('derekwyatt/vim-fswitch')
  call dein#add('SirVer/ultisnips')
  call dein#add('honza/vim-snippets')
  call dein#add('terryma/vim-multiple-cursors')
  call dein#add('majutsushi/tagbar', {'on_cmd': 'Tagbar'})
  call dein#add('tpope/vim-fugitive')
  call dein#add('lfv89/vim-interestingwords')
  call dein#add('vim-scripts/makeprgs')
  call dein#add('scrooloose/nerdtree')
  call dein#add('derekwyatt/vim-fswitch')
  call dein#add('mhinz/vim-startify')
  call dein#add('Chiel92/vim-autoformat', {'hook_add': 'au BufWrite * :Autoformat'})
  call dein#add('altercation/vim-colors-solarized', {'hook_add': 'colorscheme solarized'})
  call dein#add('junegunn/vim-easy-align', {'hook_add': 'vmap <Enter> <Plug>(EasyAlign)'})
  call dein#add('vim-airline/vim-airline-themes')
  call dein#add('vim-airline/vim-airline', {
        \ 'hook_add': join(["let g:airline#extensions#tabline#formatter = 'unique_tail'",
        \                   "let g:airline_powerline_fonts = 1",
        \                   "let g:airline#extensions#tabline#enabled = 1",
        \                   "let g:airline#extensions#tabline#left_sep = ' '",
        \                   "let g:airline#extensions#tabline#left_alt_sep = '|'",
        \                   "let g:airline#extensions#tabline#buffer_idx_mode = 1",
        \                   "nmap <leader>1 <Plug>AirlineSelectTab1",
        \                   "nmap <leader>2 <Plug>AirlineSelectTab2",
        \                   "nmap <leader>3 <Plug>AirlineSelectTab3",
        \                   "nmap <leader>4 <Plug>AirlineSelectTab4",
        \                   "nmap <leader>5 <Plug>AirlineSelectTab5",
        \                   "nmap <leader>6 <Plug>AirlineSelectTab6",
        \                   "nmap <leader>7 <Plug>AirlineSelectTab7",
        \                   "nmap <leader>8 <Plug>AirlineSelectTab8",
        \                   "nmap <leader>9 <Plug>AirlineSelectTab9"], "\n")
        \})


  call dein#add('Shougo/deoplete.nvim', {'hook_add': 'let g:deoplete#enable_at_startup = 1'})
  call dein#add('tpope/vim-commentary', {"hook_add": 'autocmd FileType c,cpp,cs,java setlocal commentstring=//\ %s'})

  call dein#add('ntpeters/vim-better-whitespace', {
        \ 'hook_add': join(["let g:better_whitespace_enabled=1",
        \                   "let g:strip_whitespace_on_save=1"], "\n")})

  call dein#add('zchee/deoplete-jedi', {'on_ft': ['python']})
  call dein#add('davidhalter/jedi-vim', {'on_ft': ['python'],
        \ 'hook_add': join(["let g:jedi#auto_vim_configuration = 0",
        \                   "let g:jedi#goto_assignments_command = ''",
        \                   "let g:jedi#goto_definitions_command = ''",
        \                   "let g:jedi#completions_enabled = 0"], "\n")})

  call dein#add('junegunn/fzf', {'build': './install --bin'})
  call dein#add('junegunn/fzf.vim', {
        \ 'hook_add': join(["nmap <space>f :Files<cr>",
        \                   "nmap <space>l :Lines<cr>",
        \                   "nmap <space>r :Rg!<cr>",
        \                   "nmap <space>b :Buffers<cr>",
        \                   "nmap <space>m :Marks<cr>",
        \                   "nmap <space>h :History<cr>",
        \                   "nmap <space>c :History:<cr>",
        \                   "nmap <space>/ :History/<cr>",
        \                   "imap <c-x><c-j> <plug>(fzf-complete-path)",
        \                   "imap <c-x><c-l> <plug>(fzf-complete-line)",
        \                   "autocmd FileType fzf set laststatus=0 noshowmode noruler | autocmd BufLeave <buffer> set laststatus=2 noshowmode ruler",
        \                   "command! -bang -nargs=? -complete=dir Files call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)",
        \                   "command! -bang -nargs=* Rg call fzf#vim#grep('rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1, <bang>0 ? fzf#vim#with_preview('up:60%') : fzf#vim#with_preview('right:50%:hidden', '?'), <bang>0)"], "\n")})

  " end of dein
  if dein#check_install() | call dein#install() | endif
  " call map(dein#check_clean(), "delete(v:val, 'rf')") "remove unused plugins
  call dein#end()
  call dein#save_state()
endif

" Options
syntax on
filetype plugin indent on
set encoding=utf-8 fileencodings=utf-8,gbk                                        " encoding
set autoindent expandtab smarttab shiftround tabstop=2 softtabstop=2 shiftwidth=2 " indentation
set wildmenu wildignorecase completeopt-=preview wildmode=list:full               " completion
set hlsearch incsearch ignorecase smartcase showmatch                             " searching
set noshowmode laststatus=2 display+=lastline                                     " status line
set lazyredraw number linebreak wrap textwidth=80                                       " ui
set noerrorbells visualbell t_vb=                                                 " bells
set noswapfile hidden undofile mouse=a                                            " misc
if !isdirectory(expand("~/.cache/vim/undo")) | call mkdir(expand("~/.cache/vim/undo"), 'p') | endif

" Mappings
if exists(':tnoremap') | tnoremap <Esc> <C-\><C-n> | endif                        " for neovim
xnoremap <          <gv
xnoremap >          >gv
nnoremap j          gj
nnoremap k          gk
nnoremap gj         j
nnoremap gk         k
nnoremap <ESC><ESC> :noh<cr>
inoremap {<CR>      {<CR>}<ESC>O

" Autocmd
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe 'normal! g`"zvzz' | endif " back to previous position
au FileType markdown setlocal nolist
au FileType vim setlocal fdm=indent keywordprg=:help
au BufRead,BufNewFile SConstruct,SConscript   set filetype=python
au BufRead,BufNewFile *.cu,*.cuda  set filetype=cpp
au BufRead,BufNewFile *.maxj       set filetype=java
au BufRead,BufNewFile gitconfig    set filetype=gitconfig

" vim: fdm=marker ts=2 sts=2 sw=2 fdl=0
